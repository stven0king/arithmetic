package com.tzx.sort;

/**
 * Created by tanzhenxing on 17-4-26.
 *
 * 每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子序列中的适当位置，知道全部记录插入完成为止。
 * 初始时，a[0]=自成1个有序区，无序区为a[1...n-1]。令i=1
 * 将a[i]并入当前的有序区a[0...i-1]中形成a[0...i]的有序区间。
 * i++并重复第二步直到i==n-1。排序完成。
 *
 * 设待排序对象个数为n，则该算法的外层循环需执行n-1次。
 * 排序吗比较次数和对象移动次数与对象排序码的初始排列有关。
 * 最好情况下：排序前对象已按排序码从小到大有序，每趟只需与前面有序对象序列的最后一个对象比较1次，而不必进行移动。因此总的排序码比较次数为n-1，对象移动次数为0。
 * 最差情况下：初始序列是逆序的，第i趟时第i个对象必须与前面i个对象都做排序码比较，并且每做1次比较就要做1次数据移动。则总排序码比较次数KCN和对象移动次数RMN均为：n(n-1)/2
 * 平均情况下：排序码比较次数和对象移动次数约为最差情况时的一半。因此，直接插入排序的时间复杂度为O(n*n)
 * 直接插入排序是一种稳定的排序方法。
 */
public class StraightInsertionSort implements Sort {
    @Override
    public void sort(int[] a) {
        int i,j,k;
        int n = a.length;
        for (i = 1; i < n; i++) {
            //为a[i]在前面的a[0...i-1]有序区间中找一个合适的位置
            for (j = i - 1; j >= 0; j--) {
                if (a[j] < a[i])
                    break;
            }
            //如找到一个合适的位置
            if (j != i - 1) {
                //将比a[i]大的数据向后移动
                int temp = a[i];
                for (k = i - 1; k > j; k--) {
                    a[k+1] = a[k];
                }
                a[k + 1] = temp;
            }
        }
    }
}
